{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My Operations Docs","text":"<p>This is where I keep notes and guides for all my ops stuff.</p>"},{"location":"#why-i-made-this","title":"Why I Made This","text":"<ul> <li>To remember how I do things.</li> <li>To keep track of all the random ops stuff I learn.</li> <li>To make my life easier when doing ops tasks.</li> </ul>"},{"location":"file_system/","title":"Exploring the File System","text":"<p>The command line interface (CLI) is a powerful tool that allows you to interact with your computer's file system. It provides a text-based interface for navigating directories, listing files, and performing various file operations. This document will guide you through the essential commands for exploring the file system using the CLI.</p>"},{"location":"file_system/#basic-navigation","title":"Basic Navigation","text":"<ul> <li><code>pwd</code>: Print the current working directory. This command displays the full path of the directory you are currently in.</li> <li><code>ls</code>: List the contents of a directory. By default, it lists the files and subdirectories in the current directory. You can use options like <code>-l</code> for a detailed list (includes file size), <code>-a</code> to show hidden files, or <code>-t</code> to sort by modification time.</li> <li><code>cd</code>: Change the current directory. Use <code>cd</code> followed by the directory name or path to move to that directory. For example, <code>cd Documents</code> or <code>cd /home/user/Documents</code>. Use <code>cd ..</code> to go up one level in the directory hierarchy.</li> </ul>"},{"location":"file_system/#file-operations","title":"File Operations","text":"<ul> <li><code>touch</code>: Create an empty file. For example, <code>touch newfile.txt</code> creates an empty file named \"newfile.txt\".</li> <li><code>cat</code>: Display the contents of a file. For example, <code>cat myfile.txt</code> displays the content of \"myfile.txt\" in the terminal.</li> <li><code>cp</code>: Copy files or directories. Use <code>cp source destination</code> to copy. For example, <code>cp myfile.txt myfile_copy.txt</code> or <code>cp -r mydirectory newdirectory</code> (to copy a directory recursively).</li> <li><code>mv</code>: Move or rename files or directories. The syntax is similar to <code>cp</code>. Use <code>mv source destination</code>. For example, <code>mv myfile.txt myfile_renamed.txt</code> or <code>mv mydirectory newlocation/</code>.</li> <li><code>rm</code>: Remove files or directories. Use <code>rm myfile.txt</code> to delete a file. To delete a directory and its contents, use <code>rm -r mydirectory</code> (be cautious with this command!).</li> <li><code>mkdir</code>: Create a new directory. For example, <code>mkdir new_directory</code> creates a directory named \"new_directory\".</li> </ul>"},{"location":"file_system/#checking-file-and-directory-sizes","title":"Checking File and Directory Sizes","text":"<ul> <li><code>ls -l</code>: As mentioned earlier, using the <code>-l</code> option with <code>ls</code> provides a detailed list of files and directories, including their sizes in bytes.<ul> <li>Example: <code>ls -l myfile.txt</code> will show details about \"myfile.txt\", including its size.</li> </ul> </li> <li><code>du</code>: This command stands for \"disk usage.\" It displays the amount of disk space used by files and directories.<ul> <li><code>du -h</code>: Shows sizes in human-readable format (KB, MB, GB). For example, <code>du -h mydirectory</code> displays the size of \"mydirectory\" and its subdirectories in a user-friendly format.</li> <li><code>du -a</code>: Displays the disk usage of individual files, not just directories. For example, <code>du -a mydirectory</code> shows the size of all files within \"mydirectory\".</li> <li><code>du -s</code>: Displays only the total size of a directory. For example, <code>du -s mydirectory</code> shows only the total size of \"mydirectory\".</li> </ul> </li> <li><code>stat</code>: This command displays various file information, including size, permissions, ownership, and more.<ul> <li>Example: <code>stat myfile.txt</code> will show detailed information about \"myfile.txt\", including its size in bytes.</li> </ul> </li> </ul>"},{"location":"file_system/#advanced-techniques","title":"Advanced Techniques","text":"<ul> <li>Wildcards: Use characters like <code>*</code> (matches any characters) or <code>?</code> (matches a single character) to select multiple files. For example, <code>ls *.txt</code> lists all files ending with \".txt\".</li> <li>Pipes and Redirection: Combine commands using pipes (<code>|</code>) to chain their output. Redirect output using <code>&gt;</code> (overwrite) or <code>&gt;&gt;</code> (append). For example, <code>ls -l | grep \"myfile\"</code> lists detailed information only for files containing \"myfile\" in their name.</li> <li><code>find</code>: Locate files based on various criteria like name, size, type, or modification time. For example, <code>find . -name \"*.txt\"</code> finds all \".txt\" files in the current directory and its subdirectories. You can also use <code>find</code> with <code>-size</code> to locate files based on their size.</li> </ul>"},{"location":"file_system/#tips-and-best-practices","title":"Tips and Best Practices","text":"<ul> <li>Use tab completion to quickly type file and directory names.</li> <li>Be careful when using commands like <code>rm -r</code>, as they can permanently delete files.</li> <li>Consider using a command-line shell like Zsh or Fish for enhanced features and customization options.</li> <li>Regularly practice using CLI commands to improve your efficiency and comfort level.</li> </ul> <p>This markdown document provides a basic introduction to exploring the file system using the CLI, including ways to check file and directory sizes. There are many other commands and techniques available, so continue learning and experimenting to master this powerful tool.</p>"},{"location":"git_internals/","title":"Git Internals","text":"<p>I was learning about some of the ways to inspect the inner working of Git. Things like logs and hashes, which might not be too useful for the most part, but it might come in handy when debugging or understanding how Git works under the hood.</p>"},{"location":"git_internals/#git-objects","title":"Git Objects","text":"<p>Git stores data in the form of objects. These objects are stored in the <code>.git/objects</code> directory of your repository. There are four types of objects in Git:</p> <ol> <li>Blob: Represents the contents of a file.</li> <li>Tree: Represents a directory.</li> <li>Commit: Represents a commit.</li> <li>Tag: Represents a tag.</li> </ol>"},{"location":"git_internals/#git-hashes","title":"Git Hashes","text":"<p>Each object is stored in a separate file within the <code>.git/objects</code> directory. The file name is the SHA-1 hash of the object's contents, the author, the commit message, and the parent commit(s). This makes it so that hashes will basically always be unique.</p>"},{"location":"git_internals/#git-log","title":"Git Log","text":"<p>The <code>git log</code> command displays the commit history of a repository. It shows the commit hash, author, date, and commit message for each commit. Some useful options for <code>git log</code> include:</p> <ul> <li><code>--oneline</code>: Displays each commit on a single line.</li> <li><code>-n</code>: Limits the number of commits displayed.</li> <li><code>--graph</code>: Displays a text-based graph of the commit history.</li> </ul>"},{"location":"git_internals/#git-cat-file","title":"Git Cat-File","text":"<p>The <code>git cat-file</code> command is used to view the contents of a Git object. You can view the contents of a commit, tree, or blob, which will all show different information depending on the object type. You can use <code>git cat-file</code> as follows:</p> <p><code>git cat-file -p &lt;hash&gt;</code></p> <p>Here are some examples of what you will see for each type of object:</p>"},{"location":"git_internals/#commit","title":"Commit","text":"<pre><code>tree 5b21d4f16a4b07a6cde5a3242187f6a5a68b060f\nauthor Nicolas Araujo &lt;email@google.com&gt; 1738469186 -0800\ncommitter Nicolas Araujo &lt;email@google.com&gt; 1738469186 -0800\n\nA: add contents.md\n</code></pre> <p>The commit object shows the tree hash, author, committer, timestamp, and commit message.</p>"},{"location":"git_internals/#tree","title":"Tree","text":"<pre><code>100644 blob ef7e93fc61a91deecaa551c4707e4c3049af42c9    contents.md\n</code></pre> <p>The tree object shows the file mode, type, hash, and file name for each file in the tree.</p>"},{"location":"git_internals/#blob","title":"Blob","text":"<pre><code># contents\n</code></pre> <p>The blob object shows the contents of the file.</p>"}]}